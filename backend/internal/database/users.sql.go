// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO users (id, discord_user_id, created_at, updated_at)
VALUES (
    gen_random_uuid(),  -- Generates a new UUID
    $1,
    NOW(),              -- Sets created_at to the current timestamp
    NOW()              -- Sets updated_at to the current timestamp                  
)
`

func (q *Queries) CreateUser(ctx context.Context, discordUserID int64) error {
	_, err := q.db.ExecContext(ctx, createUser, discordUserID)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, discord_user_id, created_at, updated_at FROM users where discord_user_id=$1
`

func (q *Queries) GetUser(ctx context.Context, discordUserID int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, discordUserID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.DiscordUserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, discord_user_id, created_at, updated_at FROM users where id=$1
`

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.DiscordUserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
